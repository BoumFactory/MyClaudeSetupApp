#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Programme de consultation des programmes officiels de math√©matiques
Permet de rechercher et afficher les comp√©tences par niveau, th√®me ou mots-cl√©s
"""

import json
from pathlib import Path
from typing import List, Dict, Optional, Union
import re


class ConsulteurProgrammes:
    """Classe pour consulter les programmes officiels de math√©matiques"""

    def __init__(self, chemin_data: Optional[str] = None):
        """
        Initialise le consulteur

        Args:
            chemin_data: Chemin vers le dossier data (par d√©faut : ./data)
        """
        if chemin_data is None:
            self.chemin_data = Path(__file__).parent / "data"
        else:
            self.chemin_data = Path(chemin_data)

        self.programmes = {}
        self._charger_programmes()

    def _charger_programmes(self):
        """Charge tous les programmes disponibles"""
        fichiers_json = self.chemin_data.glob("*.json")

        for fichier in fichiers_json:
            if fichier.name == "references_bo.json":
                continue

            niveau = fichier.stem
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    self.programmes[niveau] = json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement de {fichier}: {e}")

    def lister_niveaux_disponibles(self) -> List[str]:
        """Retourne la liste des niveaux disponibles"""
        return sorted(self.programmes.keys())

    def chercher_competence(self, code: str) -> Optional[Dict]:
        """
        Recherche une comp√©tence par son code unique

        Args:
            code: Code de la comp√©tence (ex: "6-NC-001", "1SPE-ANA-018")

        Returns:
            Dictionnaire de la comp√©tence ou None si non trouv√©e
        """
        for niveau, programme in self.programmes.items():
            if "domaines" not in programme:
                continue

            for domaine in programme["domaines"]:
                if "competences" not in domaine:
                    continue

                for competence in domaine["competences"]:
                    if competence.get("code") == code:
                        return {
                            **competence,
                            "niveau": niveau,
                            "domaine": domaine.get("nom"),
                            "domaine_code": domaine.get("code")
                        }

        return None

    def lister_competences_niveau(self, niveau: str, domaine: Optional[str] = None) -> List[Dict]:
        """
        Liste toutes les comp√©tences d'un niveau

        Args:
            niveau: Niveau (ex: "6eme", "seconde", "premiere_spe")
            domaine: Optionnel - Code du domaine pour filtrer (ex: "NC", "ALG")

        Returns:
            Liste des comp√©tences
        """
        if niveau not in self.programmes:
            return []

        programme = self.programmes[niveau]
        competences = []

        if "domaines" not in programme:
            return []

        for dom in programme["domaines"]:
            # Filtrer par domaine si sp√©cifi√©
            if domaine and dom.get("code") != domaine:
                continue

            if "competences" not in dom:
                continue

            for comp in dom["competences"]:
                competences.append({
                    **comp,
                    "niveau": niveau,
                    "domaine": dom.get("nom"),
                    "domaine_code": dom.get("code")
                })

        return competences

    def chercher_mots_cles(self, mots_cles: Union[str, List[str]],
                          niveau: Optional[str] = None) -> List[Dict]:
        """
        Recherche des comp√©tences contenant certains mots-cl√©s

        Args:
            mots_cles: Mot-cl√© ou liste de mots-cl√©s √† rechercher
            niveau: Optionnel - Limite la recherche √† un niveau

        Returns:
            Liste des comp√©tences correspondantes
        """
        if isinstance(mots_cles, str):
            mots_cles = [mots_cles]

        # Normaliser les mots-cl√©s (minuscules, sans accents)
        mots_cles_normalises = [self._normaliser_texte(mc) for mc in mots_cles]

        resultats = []
        programmes_a_chercher = {niveau: self.programmes[niveau]} if niveau else self.programmes

        for niv, programme in programmes_a_chercher.items():
            if "domaines" not in programme:
                continue

            for domaine in programme["domaines"]:
                if "competences" not in domaine:
                    continue

                for competence in domaine["competences"]:
                    # Rechercher dans l'intitul√©, les capacit√©s et les connaissances
                    texte_a_chercher = " ".join([
                        competence.get("intitule", ""),
                        " ".join(competence.get("capacites", [])),
                        " ".join(competence.get("connaissances", []))
                    ])

                    texte_normalise = self._normaliser_texte(texte_a_chercher)

                    # V√©rifier si tous les mots-cl√©s sont pr√©sents
                    if all(mc in texte_normalise for mc in mots_cles_normalises):
                        resultats.append({
                            **competence,
                            "niveau": niv,
                            "domaine": domaine.get("nom"),
                            "domaine_code": domaine.get("code")
                        })

        return resultats

    def chercher_par_theme(self, niveau: str, theme: str) -> List[Dict]:
        """
        Recherche des comp√©tences li√©es √† un th√®me

        Args:
            niveau: Niveau √† consulter
            theme: Th√®me √† rechercher (ex: "fractions", "d√©riv√©e", "pythagore")

        Returns:
            Liste des comp√©tences du th√®me
        """
        return self.chercher_mots_cles(theme, niveau)

    def afficher_competence(self, competence: Dict, detaille: bool = True):
        """
        Affiche une comp√©tence de mani√®re format√©e

        Args:
            competence: Dictionnaire de la comp√©tence
            detaille: Si True, affiche tous les d√©tails
        """
        print(f"\n{'='*80}")
        print(f"[{competence['code']}] {competence['intitule']}")
        print(f"{'='*80}")
        print(f"Niveau : {competence.get('niveau', 'N/A')}")
        print(f"Domaine : {competence.get('domaine', 'N/A')} ({competence.get('domaine_code', 'N/A')})")

        if detaille:
            if competence.get("capacites"):
                print(f"\nüìå Capacit√©s attendues :")
                for cap in competence["capacites"]:
                    print(f"  ‚Ä¢ {cap}")

            if competence.get("connaissances"):
                print(f"\nüìö Connaissances :")
                for conn in competence["connaissances"]:
                    print(f"  ‚Ä¢ {conn}")

            if competence.get("attendus"):
                print(f"\nüéØ Attendus : {competence['attendus']}")

            if competence.get("commentaires"):
                print(f"\nüí¨ Commentaires : {competence['commentaires']}")

        print(f"{'='*80}\n")

    def statistiques_niveau(self, niveau: str) -> Dict:
        """
        Calcule les statistiques d'un niveau

        Args:
            niveau: Niveau √† analyser

        Returns:
            Dictionnaire avec les statistiques
        """
        if niveau not in self.programmes:
            return {}

        programme = self.programmes[niveau]
        stats = {
            "niveau": niveau,
            "nb_domaines": len(programme.get("domaines", [])),
            "nb_competences_total": 0,
            "par_domaine": {}
        }

        for domaine in programme.get("domaines", []):
            nb_comp = len(domaine.get("competences", []))
            stats["nb_competences_total"] += nb_comp
            stats["par_domaine"][domaine.get("nom")] = nb_comp

        return stats

    @staticmethod
    def _normaliser_texte(texte: str) -> str:
        """Normalise un texte pour la recherche (minuscules, sans accents)"""
        # Minuscules
        texte = texte.lower()

        # Supprimer les accents
        accents = {
            '√†': 'a', '√¢': 'a', '√§': 'a',
            '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
            '√Æ': 'i', '√Ø': 'i',
            '√¥': 'o', '√∂': 'o',
            '√π': 'u', '√ª': 'u', '√º': 'u',
            '√ß': 'c'
        }
        for accent, sans_accent in accents.items():
            texte = texte.replace(accent, sans_accent)

        return texte


# ==================== Fonctions utilitaires ====================

def chercher_competence(code: str) -> Optional[Dict]:
    """Recherche une comp√©tence par code"""
    consulteur = ConsulteurProgrammes()
    return consulteur.chercher_competence(code)


def lister_competences_niveau(niveau: str, domaine: Optional[str] = None) -> List[Dict]:
    """Liste les comp√©tences d'un niveau"""
    consulteur = ConsulteurProgrammes()
    return consulteur.lister_competences_niveau(niveau, domaine)


def chercher_mots_cles(mots_cles: Union[str, List[str]],
                       niveau: Optional[str] = None) -> List[Dict]:
    """Recherche par mots-cl√©s"""
    consulteur = ConsulteurProgrammes()
    return consulteur.chercher_mots_cles(mots_cles, niveau)


def chercher_par_theme(niveau: str, theme: str) -> List[Dict]:
    """Recherche par th√®me"""
    consulteur = ConsulteurProgrammes()
    return consulteur.chercher_par_theme(niveau, theme)


# ==================== Interface en ligne de commande ====================

def main():
    """Interface en ligne de commande"""
    import argparse

    parser = argparse.ArgumentParser(
        description="Consulter les programmes officiels de math√©matiques"
    )

    subparsers = parser.add_subparsers(dest="commande", help="Commande √† ex√©cuter")

    # Commande: lister les niveaux
    subparsers.add_parser("niveaux", help="Lister les niveaux disponibles")

    # Commande: chercher une comp√©tence
    parser_code = subparsers.add_parser("code", help="Chercher une comp√©tence par code")
    parser_code.add_argument("code", help="Code de la comp√©tence (ex: 6-NC-001)")

    # Commande: lister les comp√©tences d'un niveau
    parser_niveau = subparsers.add_parser("niveau", help="Lister les comp√©tences d'un niveau")
    parser_niveau.add_argument("niveau", help="Niveau (ex: 6eme, seconde)")
    parser_niveau.add_argument("--domaine", help="Filtrer par domaine (ex: NC, ALG)")

    # Commande: recherche par mots-cl√©s
    parser_recherche = subparsers.add_parser("recherche", help="Rechercher par mots-cl√©s")
    parser_recherche.add_argument("mots_cles", nargs="+", help="Mots-cl√©s √† rechercher")
    parser_recherche.add_argument("--niveau", help="Limiter √† un niveau")

    # Commande: statistiques
    parser_stats = subparsers.add_parser("stats", help="Statistiques d'un niveau")
    parser_stats.add_argument("niveau", help="Niveau √† analyser")

    args = parser.parse_args()

    consulteur = ConsulteurProgrammes()

    # Ex√©cution des commandes
    if args.commande == "niveaux":
        print("\nüìö Niveaux disponibles :")
        for niveau in consulteur.lister_niveaux_disponibles():
            stats = consulteur.statistiques_niveau(niveau)
            print(f"  ‚Ä¢ {niveau} ({stats['nb_competences_total']} comp√©tences)")

    elif args.commande == "code":
        comp = consulteur.chercher_competence(args.code)
        if comp:
            consulteur.afficher_competence(comp)
        else:
            print(f"‚ùå Comp√©tence {args.code} non trouv√©e")

    elif args.commande == "niveau":
        competences = consulteur.lister_competences_niveau(args.niveau, args.domaine)
        print(f"\nüìã {len(competences)} comp√©tences trouv√©es pour {args.niveau}")
        if args.domaine:
            print(f"   (domaine : {args.domaine})")

        for comp in competences:
            consulteur.afficher_competence(comp, detaille=False)

    elif args.commande == "recherche":
        competences = consulteur.chercher_mots_cles(args.mots_cles, args.niveau)
        print(f"\nüîç {len(competences)} comp√©tences trouv√©es")

        for comp in competences:
            consulteur.afficher_competence(comp, detaille=False)

    elif args.commande == "stats":
        stats = consulteur.statistiques_niveau(args.niveau)
        if stats:
            print(f"\nüìä Statistiques pour {args.niveau}")
            print(f"  Nombre de domaines : {stats['nb_domaines']}")
            print(f"  Nombre total de comp√©tences : {stats['nb_competences_total']}")
            print(f"\n  R√©partition par domaine :")
            for domaine, nb in stats['par_domaine'].items():
                print(f"    ‚Ä¢ {domaine} : {nb} comp√©tences")
        else:
            print(f"‚ùå Niveau {args.niveau} non trouv√©")

    else:
        parser.print_help()


if __name__ == "__main__":
    main()
